#!/usr/bin/env node

/**
 * Module dependencies.
 */

let app = require('../app');
let debug = require('debug')('test:server');
let http = require('http');
let mongoose=require('mongoose')
mongoose.connect('mongodb://localhost')
let db=mongoose.connection
db.on('connect',(error)=>{
    if (!error){}
    console.log("链接成功")
})
db.on('close',(error)=>{
    if (!error){}
    console.log("断开成功")
})
db.on('error',(error)=>{
    if (!error){}
    console.log("链接错误")
})

/*
//引入包
let socketpackage = require('socket.io')
//实例化
let io = socketpackage(server)
//建立连接
io.on("connection", (socket) => {
    console.log("链接成功")
    //给客户端广播信息
    socket.emit('msg', "欢迎找我聊天")
    //接受客户端消息
    socket.on('msg', (data) => {
        console.log(data)
        let msg = backMsg(data)
        socket.emit('msg', msg)
    })
    //链接关闭
    socket.on('disconnect',()=>{
        console.log("链接已经关闭")
    })
})
let backMsg = (data) => {
    let msg = data
    switch (data){
        case "小撩":
            msg="我在呢"
            break
        case "你大爷":
            msg="我去你的"
            break
    }
}
*/

/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

let server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    let port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    let bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    let addr = server.address();
    let bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
